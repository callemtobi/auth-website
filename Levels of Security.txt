<-- ENCRYPTION LEVELS -->

Level 1 - User authentication using email and password. 
          Store passwords in plain text in db.
          Stored in server level (atleast not in source code after inspecting html).
          NOT SAFE!

Level 2 - Encryption (Database): Scrambling the original data.
          NPM Package: mongoose-encryption 
                    - Encryption [AES-256-CBC] - Advanced Encryption Standard, 
                      encrypt sensitive data, such as financial transactions and 
                      personal information. Algorithm.
                    - Authentication [HMAC-SHA-512] - cryptographic process that 
                      authenticates messages using a secret key and the SHA-512 hash function.
                      A member of the SHA-2 (Secure Hash Algorithm 2).
                      A secret key is mixed with the message data and hashes the result. 
                      The hash value is mixed with the secret key again, and then hashed a second time.
          It's best to leave the email field unencrypted as we would need to search for users using their email.
          The hacker will easily get access to your app.js if your website is hacked, which contains the API keys
          and also the secret password plugin. Therefore... STILL NOT SAFEE!

        - Environment Variables: Use the 'dotenv' package to hide secret passwords, API keys, etc.
          However, git and github works on version control basis, so if you have a version (in history) where 
          your API keys are visible. So as you create a new project, make sure to create .env file as well.
      
Level 3 - Hashing [MD5]: Running sensitive data (password) through a hash function, we get a hash.
          - Remove encryption-plugin
          - Its easy to convert passwords into hash (using hash fun()), but nearly impossible to convert 
          the hash back in to password.
          - The password is saved as hash in the database upon registering, and when the user tries to login with 
          that password, the input password is converted to hash and compared with the hash password stored in DB.
          - since MD5 is a 128 bit cryptographic function, there are 2^128-1 = 340282366920938463463374607431768211455 
          possible combinations.

Level 4 - Salting and Hashing: adding a unique set of random characters to the password, and then hashing it -> db.
          - Using [bcrypt] > [MD5]: It has a concept of Salt Rounds. The more salt rounds, the saltier it is, the 
          harder it is to hack. The first round contains: 
                Round 1 : PASSWORD + SALT ----HASH FUNC---> HASH
                Round 2 : HASH + SALT(SAME) ----HASH FUNC---> HASH... and so on...

Level 5 - Cookies: are used to save browsing sessions (online amazon shopping cart example). It goes beyond just saving 
          your last action on the website. That particular website (amazon) adds cookies to the browser, so when you 
          visit a different site, it knows what you searched for on amazon, who you are, and what you wanted to buy.
          [Retargeting ads].
          Sessions: a period of time where browser interacts with a server. 
          Log into a website -> session start -> cookie created. 
          Authentication is also managed with cookies. So you are not logged out. When you log out, session -> ends. 
          
          
          
        